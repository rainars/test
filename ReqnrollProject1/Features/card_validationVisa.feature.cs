// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class VisaCreditCardValidationFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Visa Credit Card Validation", "  As an API consumer\r\n  I want to validate credit card details\r\n  So that only va" +
                "lid credit card transactions are processed", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "card_validationVisa.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
 await testRunner.GivenAsync("the API base URL is set", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate credit card owner field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Visa Credit Card Validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa", "200", "10", "4123111111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("VISA", "200", "10", "4222111111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("john", "200", "10", "4333111111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Doe", "200", "10", "4444111111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Mary Lee", "200", "10", "4555111111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Doe Smith Brown", "400", "\"Wrong owner\"", "4666111111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa123", "400", "\"Wrong owner\"", "4777111111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa_Doe", "400", "\"Wrong owner\"", "4888111111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa@Smith", "400", "\"Wrong owner\"", "4999111111111", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"   Visa Doe\"", "400", "\"Wrong owner\"", "4123412341234", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"Visa Doe   \"", "400", "\"Wrong owner\"", "4234512341234", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"12134 442\"", "400", "\"Wrong owner\"", "4345612341234", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"\"", "400", "\"Wrong owner\"", "4456712341234", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa  Doe", "400", "\"Wrong owner\"", "4567812341234", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("O\'Visa", "400", "\"Wrong owner\"", "4678912341234", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa\\tBob", "400", "\"Wrong owner\"", "4789012341234", null)]
        public async System.Threading.Tasks.Task ValidateCreditCardOwnerField(string owner, string statusCode, string expectedMessage, string number, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedMessage", expectedMessage);
            argumentsOfScenario.Add("number", number);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate credit card owner field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 11
 await testRunner.GivenAsync(string.Format("a credit card with ONLY owner \"{0}\" and number \"{1}\"", owner, number), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
 await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
 await testRunner.ThenAsync(string.Format("the response status should be {0}", statusCode), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 14
 await testRunner.AndAsync(string.Format("the response should contain an error for Owner \"{0}\"", expectedMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Visa card number field errors")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Visa Credit Card Validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Johnson", "4111111111111", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Smith", "4000000000000456", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Brown", "411111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Taylor", "41111111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Lee", "411111111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa White", "41111111111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Clark", "4111a11111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Garcia", "4111a11111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Miller", "aaaaaaaaaaaaa", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Davis", "41111@1111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Lopez", "41111@1111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Adams", "4111-1111-1111-1111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Visa Thompson", "4111 1111 1111 1111", "400", "\"Wrong number\"", null)]
        public async System.Threading.Tasks.Task ValidateVisaCardNumberFieldErrors(string owner, string number, string statusCode, string expectedMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedMessage", expectedMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate Visa card number field errors", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 38
    await testRunner.GivenAsync(string.Format("a credit card with ONLY owner \"{0}\" and number \"{1}\"", owner, number), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
 await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.ThenAsync(string.Format("the response status should be {0}", statusCode), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
 await testRunner.AndAsync(string.Format("the response should contain an error for Number \"{0}\"", expectedMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Visa card expiration date checks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Visa Credit Card Validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12/25", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12/2025", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("01/22", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("13/25", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12-25", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12/252525", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12/5", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("02/2024", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("02/2020", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("02/29", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("02/28", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("122025", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\" 12/25 \"", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("01/25", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("1/25", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("abc/xyz", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("00/25", "400", "Wrong date", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12/2025", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12/2100", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12/2500", "400", "Wrong date", null)]
        public async System.Threading.Tasks.Task ValidateVisaCardExpirationDateChecks(string issueDate, string statusCode, string expectedMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("issueDate", issueDate);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedMessage", expectedMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate Visa card expiration date checks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 70
 await testRunner.GivenAsync(string.Format("a credit card with issue date \"{0}\"", issueDate), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 71
 await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 72
 await testRunner.ThenAsync(string.Format("the response status should be {0}", statusCode), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
 await testRunner.AndAsync(string.Format("the response should contain \"{0}\"", expectedMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate credit card CVC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Visa Credit Card Validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("123", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("1234", "200", "10", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12", "400", "Wrong cvv", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12345", "400", "Wrong cvv", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12a", "400", "Wrong cvv", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("1 23", "400", "Wrong cvv", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("12#", "400", "Wrong cvv", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("abc", "400", "Wrong cvv", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\" 123\"", "400", "Wrong cvv", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"123 \"", "400", "Wrong cvv", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"\"", "400", "Wrong cvv", null)]
        public async System.Threading.Tasks.Task ValidateCreditCardCVC(string cvc, string statusCode, string expectedMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("cvc", cvc);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedMessage", expectedMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate credit card CVC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 100
 await testRunner.GivenAsync(string.Format("a credit card with CVC \"{0}\"", cvc), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 101
 await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 102
 await testRunner.ThenAsync(string.Format("the response status should be {0}", statusCode), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 103
 await testRunner.AndAsync(string.Format("the response should contain \"{0}\"", expectedMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate credit card with invalid CVC and owner")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Visa Credit Card Validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("John123", "12", "400", "\"Wrong owner\"", "\"Wrong cvv\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("John_Doe", "12345", "400", "\"Wrong owner\"", "\"Wrong cvv\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Jane@Smith", "12a", "400", "\"Wrong owner\"", "\"Wrong cvv\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\" John\"", "1 23", "400", "\"Wrong owner\"", "\"Wrong cvv\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("John_Doe", "abc", "400", "\"Wrong owner\"", "\"Wrong cvv\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\" John\"", "\" 123\"", "400", "\"Wrong owner\"", "\"Wrong cvv\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"John Doe \"", "\"123 \"", "400", "\"Wrong owner\"", "\"Wrong cvv\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"\"", "\"\"", "400", "\"Wrong owner\"", "\"Wrong cvv\"", null)]
        public async System.Threading.Tasks.Task ValidateCreditCardWithInvalidCVCAndOwner(string owner, string cvv, string statusCode, string ownerError, string cvvError, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("cvv", cvv);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("ownerError", ownerError);
            argumentsOfScenario.Add("cvvError", cvvError);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate credit card with invalid CVC and owner", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 121
    await testRunner.GivenAsync(string.Format("a credit card with owner \"{0}\" and CVC \"{1}\"", owner, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 122
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 123
    await testRunner.ThenAsync(string.Format("the response status should be {0}", statusCode), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 124
    await testRunner.AndAsync(string.Format("the response should contain errors for owner \"{0}\" and CVC \"{1}\"", ownerError, cvvError), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
