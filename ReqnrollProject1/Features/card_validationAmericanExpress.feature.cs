// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AmericanExpressCreditCardValidationFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "AmericanExpress Credit Card Validation", ("  As an API consumer\r\n  I want to validate credit card details\r\n  So that only va" +
                "lid credit card transactions are processed"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "card_validationAmericanExpress.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
 await testRunner.GivenAsync("the API base URL is set", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate AmericanExpress card owner field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AmericanExpress Credit Card Validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America", "200", "30", "371449635398401", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("AMERICA", "200", "30", "371449635398402", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("america", "200", "30", "371449635398403", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Doe", "200", "30", "371449635398404", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Mary Lee", "200", "30", "371449635398405", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Doe Smith Brown", "400", "\"Wrong owner\"", "371449635398406", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America123", "400", "\"Wrong owner\"", "371449635398407", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America_Doe", "400", "\"Wrong owner\"", "371449635398408", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America@Smith", "400", "\"Wrong owner\"", "371449635398409", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"   America Doe\"", "400", "\"Wrong owner\"", "371449635398410", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"America Doe   \"", "400", "\"Wrong owner\"", "371449635398411", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"12134 442\"", "400", "\"Wrong owner\"", "371449635398412", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("\"\"", "400", "\"Wrong owner\"", "371449635398413", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America  Doe", "400", "\"Wrong owner\"", "371449635398414", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("O\'America", "400", "\"Wrong owner\"", "371449635398415", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America\\tBob", "400", "\"Wrong owner\"", "371449635398416", null)]
        public async System.Threading.Tasks.Task ValidateAmericanExpressCardOwnerField(string owner, string statusCode, string expectedMessage, string number, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedMessage", expectedMessage);
            argumentsOfScenario.Add("number", number);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate AmericanExpress card owner field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 11
 await testRunner.GivenAsync(string.Format("a credit card with ONLY owner \"{0}\" and number \"{1}\"", owner, number), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
 await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
 await testRunner.ThenAsync(string.Format("the response status should be {0}", statusCode), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 14
 await testRunner.AndAsync(string.Format("the response should contain an error for Owner \"{0}\"", expectedMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate AmericanExpress card number fields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AmericanExpress Credit Card Validation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Johnson", "341111111111111", "200", "30", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Smith", "371234567890123", "200", "30", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Brown", "34111111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Taylor", "3711111111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America White", "341111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Garcia", "361234567890123", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Lopez", "391234567890123", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Clark", "34111a111111111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Davis", "37123#567890123", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Miller", "aaaaaaaaaaaaaaa", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Lopez", "34111111111aa123", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Brown", "3411-1111-1111-111", "400", "\"Wrong number\"", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("America Lee", "3712 3456 7890 123", "400", "\"Wrong number\"", null)]
        public async System.Threading.Tasks.Task ValidateAmericanExpressCardNumberFields(string owner, string number, string statusCode, string expectedMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("statusCode", statusCode);
            argumentsOfScenario.Add("expectedMessage", expectedMessage);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate AmericanExpress card number fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 38
 await testRunner.GivenAsync(string.Format("a credit card with ONLY owner \"{0}\" and number \"{1}\"", owner, number), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
 await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.ThenAsync(string.Format("the response status should be {0}", statusCode), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
 await testRunner.AndAsync(string.Format("the response should contain an error for Number \"{0}\"", expectedMessage), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
